A sample application to build a mesh of elements using Delaunay triangles in a rectangular window (farfield). The mesh
can either be built around an airfoil surface or can fill an empty space.

The mesh generation process is governed by several parameters (saved as settings) which can be adjusted at the start of
the build and used to optimize the mesh quality.


1.0 Initial Build
=================

1.1 Grids around airfoil surfaces
=================================
Airfoil surfaces stored as comma-separated coordinate pairs are read from a text file. The airfoil coordinates are scaled to
unit length.

These coordinate pairs are the initial nodes for the grid. Additional nodes are then added in layers around the airfoil
(the same number in each layer) and a final layer is created by placing nodes on farfield boundary.

As nodes are added, triangular grid elements are created by linking the nodes together so that they become the vertices of
a triangle. This set of triangles is referred to as a mesh.

Load a shape file, then click on the 'Build' button to build a grid around a shape.

1.2 Grids in Empty Spaces
==========================
Nodes are placed around the edge of the farfield and an initial mesh of trianglular elements is created by
linking them together. No airfoil surface is involved.

Click on the 'Empty Space' button to build a grid.


2. Mesh Refinement
==================
After the initial build the mesh can be refined in four ways: Delaunay triangulation, splitting the triangle elements into
smaller triangle elements, Laplace smoothing of the mesh, and redistribution of the nodes on the farfield boundary. 

2.1 Mesh Refinement: Delaunay
=============================
In a delaunay optimized mesh, only nodes that comprise a triangular mesh element fall within its circumcircle. The method
for optimizing involves taking two side-by-side triangular elements and flipping the common side so that it now connects the
two previously unconnected vertices.

Click on the 'Delaunay' button to perform

2.2 Mesh Refinement: Split triangles
====================================
Triangular mesh elements are split into two triangles by dividing on the longest side.

Click on the 'Refine' button to make the mesh finer.

2.3 Mesh Refinement: Laplace smoothing
======================================
The distribution of nodes is made more even.

Click on the 'Smooth' button to perform smoothing cycles.

2.4 Mesh Refinement: Redistribution
====================================
Nodes on the farfield boundary are redistributed to improve mesh quality.

Click on the 'Redistribute' button to rearrange nodes on the boundary.


3.0 Code Structure
==============================
The application starts from the module Main.vb and is built on a 5-layer model. Constants and
settings are defined in the Common folder. Dependency injection is provided with the Simple Injector package.

Parallel processing has been used for some operations.

The layers:

1. Window operation including layout, buttons, input fields and graphic display (MainForm.vb). Open GL 1.0 is used to
enable faster drawing of the mesh.

2. Logic - readable modules of code that are called from each button's code-behind. These call individual services.

3. Services - lower levels of code wich rely on support from:

4a. Factory - which controls the creation, update and replacement of mesh elements
4b. Data - which defines the data structures

5. Repository is not implemented as a separate layer because there are no read/write operations to a database or file.

4.0 Suggested Improvements
===========================
Spline fitting for new nodes on the airfoil surface (currently they are placed at the midpoint of the adjacent nodes).

Methods for node redistribution inside the farfield to improve mesh quality.

Simplify and refine the InCircle function within Delaunay.vb

Use OpenCL to speed up calculations.

Write mesh to an external file.

Can definitions of configurations for Delaunay, Triangle Splitter be made in one location. As types?
